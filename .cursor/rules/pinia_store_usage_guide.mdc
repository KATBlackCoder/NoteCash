---
description: 
globs: 
alwaysApply: true
---
<!--
@skipDocs

Create a new file in the .cursor/rules directory (pinia_store_usage_guide.mdc) that outlines the basic way to use Pinia stores in this project, emphasizing the use of Setup Stores.
-->

# Pinia Store Usage Guide

This guide outlines the standard way to create and use Pinia stores within the AI Game Translator project, ensuring consistency and leveraging Nuxt 3 / Vue 3 best practices.

## Core Principle: Setup Stores

All Pinia stores in this project **MUST** be defined using the **Setup Store syntax**. This approach aligns with Vue 3's Composition API, offering greater flexibility, type safety, and composability compared to the Options API syntax for stores.

## Store Definition Structure

New stores should follow this general structure:

1.  **Imports:** Import `defineStore` from `pinia`, `ref` (and other Vue reactiviy APIs as needed) from `vue`, `invoke` from `@tauri-apps/api/core` if backend communication is needed, and `useToast` from `#imports` for UI notifications.
2.  **`defineStore` Call:**
    *   The first argument is a unique string ID for the store (e.g., `'project'`, `'settings'`).
    *   The second argument is the setup function `() => { ... }`.
3.  **Inside the Setup Function:**
    *   **State:** Define state properties using `ref()` (for simple values) or `reactive()` (for objects).
    *   **Getters (Computed Properties):** Define getters using `computed()` if complex derived state is needed.
    *   **Actions:** Define actions as regular `async` or synchronous functions. These functions will mutate the state refs directly (e.g., `myStateRef.value = ...`).
    *   **Toast Initialization:** If using toasts, initialize `useToast()` once at the top of the setup function scope.
    *   **Return:** Explicitly return all state properties, getters, and actions that should be accessible from outside the store.

## Quick Generic Example

Here's a very basic, self-contained example of a Setup Store and its usage:

**1. Defining the Store (`stores/counter.ts` - hypothetical)**

```typescript
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';

export const useCounterStore = defineStore('counter', () => {
  // State
  const count = ref(0);

  // Getter (Computed Property)
  const doubleCount = computed(() => count.value * 2);

  // Action
  function increment() {
    count.value++;
  }

  return {
    count,
    doubleCount,
    increment,
  };
});
```

**2. Using the Store in a Component (`components/MyCounter.vue` - hypothetical)**

```vue
<template>
  <div>
    <p>Count: {{ count }}</p>
    <p>Double Count: {{ doubleCount }}</p>
    <button @click="counterStore.increment">Increment</button>
  </div>
</template>

<script lang="ts" setup>
import { storeToRefs } from 'pinia';
import { useCounterStore } from '~/stores/counter'; // Assuming store is in stores/counter.ts

const counterStore = useCounterStore();

// Use storeToRefs to get reactive refs for state and getters
const { count, doubleCount } = storeToRefs(counterStore);

// Actions can be called directly on the store instance, e.g., in the template or other functions.
</script>
```

## Using Stores in Components

When using a store within a Vue component's `<script setup>`:

1.  **Import the store:** `import { useMyStore } from '~/stores/myStore';`
2.  **Instantiate the store:** `const myStore = useMyStore();`
3.  **Accessing State and Getters:**
    *   To maintain reactivity when destructuring state properties or getters, use `storeToRefs` from `pinia`:
        ```typescript
        import { storeToRefs } from 'pinia';
        // ...
        const { reactiveStateProperty, reactiveGetter } = storeToRefs(myStore);
        ```
    *   You can also access them directly via `myStore.propertyName`, but `storeToRefs` is preferred for destructuring.
4.  **Calling Actions:** Call actions directly as methods on the store instance: `await myStore.doSomething();`

By following these guidelines, we ensure that all Pinia stores are implemented consistently, making the codebase easier to understand, maintain, and scale.


